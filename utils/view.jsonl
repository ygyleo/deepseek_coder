{"name":"net::TcpSocket::Accept(char*, unsigned int&)","code":"int TcpSocket::Accept(char* fromIP, UINT& fromPort)\n{\n    assert(fromIP != NULL);\n    sockaddr_in from;\n    memset(&from, 0, sizeof(struct sockaddr_in));\n    from.sin_family = AF_INET;\n    socklen_t len = sizeof(from);\n    int clientSock = -1;\n    if ((clientSock = accept(fd_, (sockaddr*) &from, &len)) < 0 )\n        return clientSock;\n    strcpy(fromIP, inet_ntoa(from.sin_addr));\n    fromPort = htons(from.sin_port);\n    return clientSock;\n}","asm":"pushq %rbp\npushq %r14\npushq %rbx\nsubq $0x20, %rsp\ntestq %rsi, %rsi\nje 0x2eb7\nmovq %rdx, %rbx\nmovq %rsi, %r14\nxorps %xmm0, %xmm0\nleaq 0x10(%rsp), %rsi\nmovaps %xmm0, (%rsi)\nmovw $0x2, (%rsi)\nleaq 0xc(%rsp), %rdx\nmovl $0x10, (%rdx)\nmovl 0x8(%rdi), %edi\ncallq 0x20a0\nmovl %eax, %ebp\ntestl %eax, %eax\njs 0x2eac\nmovl 0x14(%rsp), %edi\ncallq 0x2130\nmovq %r14, %rdi\nmovq %rax, %rsi\ncallq 0x2270\nmovzwl 0x12(%rsp), %eax\nrolw $0x8, %ax\nmovzwl %ax, %eax\nmovl %eax, (%rbx)\nmovl %ebp, %eax\naddq $0x20, %rsp\npopq %rbx\npopq %r14\npopq %rbp\nretq\nleaq 0x3257(%rip), %rdi      # 0x6115\nleaq 0x31b6(%rip), %rsi      # 0x607b\nleaq 0x3258(%rip), %rcx      # 0x6124\nmovl $0x2d, %edx\ncallq 0x2190\n","file":"\/distanceNing[P]benchmarkTool\/socket\/tcp_socket.cpp"}
{"name":"net::TcpSocket::read_n(void*, unsigned long)","code":"ssize_t TcpSocket::read_n(void* msg, size_t buf_len)\n{\n    assert(msg != NULL);\n    ssize_t recv_size = 0;\n    ssize_t a_recv_size;\n    while ((a_recv_size = ::read(fd_, (char*) msg + recv_size, buf_len - recv_size)) > 0) {\n        recv_size += a_recv_size;\n        if ( recv_size == buf_len )\n            break;\n    }\n    return recv_size;\n}","asm":"pushq %r15\npushq %r14\npushq %r12\npushq %rbx\npushq %rax\ntestq %rsi, %rsi\nje 0x30f8\nmovq %rdx, %rbx\nmovq %rsi, %r14\nmovq %rdi, %r12\nxorl %r15d, %r15d\nmovl 0x8(%r12), %edi\nleaq (%r14,%r15), %rsi\nmovq %rbx, %rdx\nsubq %r15, %rdx\ncallq 0x2340\ntestq %rax, %rax\njle 0x30e9\naddq %rax, %r15\ncmpq %rbx, %r15\njne 0x30c5\nmovq %rbx, %r15\nmovq %r15, %rax\naddq $0x8, %rsp\npopq %rbx\npopq %r12\npopq %r14\npopq %r15\nretq\nleaq 0x3118(%rip), %rdi      # 0x6217\nleaq 0x2f75(%rip), %rsi      # 0x607b\nleaq 0x314c(%rip), %rcx      # 0x6259\nmovl $0x74, %edx\ncallq 0x2190\nnop\n","file":"\/distanceNing[P]benchmarkTool\/socket\/tcp_socket.cpp"}
{"name":"net::TcpSocket::sockConnect(int, char const*, unsigned short)","code":"bool TcpSocket::sockConnect(int fd, const char* conn_ip, uint16_t conn_port)\n{\n    assert(conn_ip != NULL);\n    sockaddr_in conAddr;\n    memset(&conAddr, 0, sizeof(struct sockaddr_in));\n    conAddr.sin_family = AF_INET;\n    conAddr.sin_addr.s_addr = inet_addr(conn_ip);\n    conAddr.sin_port = htons(static_cast<uint16_t>(conn_port));\n    socklen_t len = sizeof(conAddr);\n    int flag = ::connect(fd, (sockaddr*) &conAddr, len);\n    return flag >= 0;\n}","asm":"pushq %rbp\npushq %r14\npushq %rbx\nsubq $0x10, %rsp\ntestq %rsi, %rsi\nje 0x31ac\nmovl %edx, %ebp\nmovl %edi, %ebx\nmovq %rsp, %r14\nmovq $0x0, 0x8(%r14)\nmovw $0x2, (%r14)\nmovq %rsi, %rdi\ncallq 0x22b0\nmovl %eax, 0x4(%r14)\nrolw $0x8, %bp\nmovw %bp, 0x2(%r14)\nmovl %ebx, %edi\nmovq %r14, %rsi\nmovl $0x10, %edx\ncallq 0x2210\ntestl %eax, %eax\nsetns %al\naddq $0x10, %rsp\npopq %rbx\npopq %r14\npopq %rbp\nretq\nleaq 0x30e0(%rip), %rdi      # 0x6293\nleaq 0x2ec1(%rip), %rsi      # 0x607b\nleaq 0x30e2(%rip), %rcx      # 0x62a3\nmovl $0x8e, %edx\ncallq 0x2190\nnop\n","file":"\/distanceNing[P]benchmarkTool\/socket\/tcp_socket.cpp"}
{"name":"Thread::threadFun(void*)","code":"void* Thread::threadFun(void* arg)\r\n{\r\n    Thread* thread= static_cast<Thread*>(arg);\r\n    thread->threadFun_();\r\n    return NULL;\r\n}","asm":"pushq %rax\ncmpq $0x0, 0x18(%rdi)\nje 0x3872\nmovq %rdi, %rax\naddq $0x8, %rdi\ncallq *0x20(%rax)\nxorl %eax, %eax\npopq %rcx\nretq\ncallq 0x20f0\nnop\n","file":"\/distanceNing[P]benchmarkTool\/thread\/Thread.cpp"}
{"name":"addsig(int)","code":"void addsig(int sig)\n{\n    struct sigaction sa;\n    memset(&sa, 0, sizeof(sa));\n    sa.sa_handler = timerHandle;\n    sa.sa_flags |= SA_RESTART;\n    sigfillset(&sa.sa_mask);\n    sigaction(sig, &sa, NULL);\n}","asm":"pushq %r14\npushq %rbx\nsubq $0x98, %rsp\nmovl %edi, %ebx\nleaq 0x8(%rsp), %r14\nmovl $0x90, %edx\nmovq %r14, %rdi\nxorl %esi, %esi\ncallq 0x2170\nleaq -0x34(%rip), %rax       # 0x3960\nmovq %rax, -0x8(%r14)\nmovl $0x10000000, 0x80(%r14) # imm = 0x10000000\nmovq %r14, %rdi\ncallq 0x20b0\nmovq %rsp, %rsi\nmovl %ebx, %edi\nxorl %edx, %edx\ncallq 0x2300\naddq $0x98, %rsp\npopq %rbx\npopq %r14\nretq\n","file":"\/distanceNing[P]benchmarkTool\/benckmark.cpp"}
{"name":"BenchMark::run()","code":"void BenchMark::run()\n{\n    g_is_loop = true;\n    \/\/设置测试时间\n    addsig(SIGALRM);\n    addsig(SIGTERM);\n    alarm(gOption.duration_);\n \n    ThreadPool threadPool(gOption.thread_num_ - 1);\n   \n    for (int i = 1; i < gOption.thread_num_; ++i) {\n        threadPool.appendTask(std::bind(&BenchMark::benchmark, this, i));\n    }\n    threadPool.run();\n    benchmark(0);\n    \/\/threadPool.join();\n    \/\/sleep(1);\n    \/\/统计测试结果\n\n    \/*\n     *  QPS = req\/sec = 请求数\/秒\n     *  QPS = 总请求数 \/ ( 进程总数 *   请求时间 )\n     *  QPS: 单个进程每秒请求服务器的成功次数\n     *\n     *\/\n    uint64_t total_request_num = 0;\n    uint64_t total_response_num = 0;\n    uint64_t total_time = 0;\n    for (int i = 0; i < gOption.thread_num_; ++i) {\n        total_request_num += testResult_[i].request_num_;\n        total_response_num += testResult_[i].response_num_;\n        total_time += testResult_[i].use_timer_;\n    }\n\n    for(int i = 0;i < gOption.thread_num_;++i)\n    {\n        std::cout << \"this is thread \" << i << \" :\\n\";\n        std::cout << \"\\tconnect  time : \" << gOption.concurrent_num_ << \" use : \" << testResult_[i].connect_time_ << \" us\\n\";\n        std::cout << \"\\tuse      time : \" << testResult_[i].use_timer_ << \" \\n\";\n        std::cout << \"\\trequest  num  : \" << testResult_[i].request_num_ << \" \\n\";\n        std::cout << \"\\tresponse num  : \" << testResult_[i].response_num_ << \" \\n\";\n    }\n\n    std::cout<<\"total result : \\n\";\n    std::cout << \"\\ttotal request  num  is : \" << total_request_num << \"\\n\";\n    std::cout << \"\\ttotal response num  is : \" << total_response_num << \"\\n\";\n    std::cout << \"\\ttotal use     time  is : \" << total_time << \"\\n\";\n    std::cout << \"\\tQPS                 is : \" << (total_response_num*(1000 * 1000) \/total_time)*gOption.thread_num_   << \"\\n\";\n}","asm":"pushq %rbp\npushq %r15\npushq %r14\npushq %r13\npushq %r12\npushq %rbx\nsubq $0xc8, %rsp\nmovq %rdi, (%rsp)\nmovb $0x1, 0x67f4(%rip)      # 0xa298\nleaq 0x38(%rsp), %rbx\nmovl $0x90, %edx\nmovq %rbx, %rdi\nxorl %esi, %esi\ncallq 0x2170\nleaq -0x15f(%rip), %r14      # 0x3960\nmovq %r14, -0x8(%rbx)\nmovl $0x10000000, %ebp       # imm = 0x10000000\nmovl %ebp, 0x80(%rbx)\nmovq %rbx, %rdi\ncallq 0x20b0\nleaq 0x30(%rsp), %rsi\nmovl $0xe, %edi\nxorl %edx, %edx\ncallq 0x2300\nleaq 0x38(%rsp), %rbx\nmovl $0x90, %edx\nmovq %rbx, %rdi\nxorl %esi, %esi\ncallq 0x2170\nmovq %r14, -0x8(%rbx)\nmovl %ebp, 0x80(%rbx)\nmovq %rbx, %rdi\ncallq 0x20b0\nleaq 0x30(%rsp), %rsi\nmovl $0xf, %edi\nxorl %edx, %edx\ncallq 0x2300\nmovl 0x6770(%rip), %edi      # 0xa294\ncallq 0x2450\nmovq 0x6748(%rip), %rsi      # 0xa278\ndecq %rsi\nleaq 0x30(%rsp), %rdi\ncallq 0x45c2\ncmpq $0x2, 0x6733(%rip)      # 0xa278\njb 0x3bd5\nmovl $0x1, %ebx\nleaq 0x3eb(%rip), %r12       # 0x3f42\nleaq 0x1856(%rip), %r13      # 0x53b4\nleaq 0x186f(%rip), %rbp      # 0x53d4\nleaq 0x30(%rsp), %r14\nleaq 0x10(%rsp), %r15\nmovq $0x0, 0x18(%rsp)\nmovl $0x20, %edi\ncallq 0x22a0\nmovq %r12, (%rax)\nmovq $0x0, 0x8(%rax)\nmovl %ebx, 0x10(%rax)\nmovq (%rsp), %rcx\nmovq %rcx, 0x18(%rax)\nmovq %rax, 0x10(%rsp)\nmovq %r13, 0x28(%rsp)\nmovq %rbp, 0x20(%rsp)\nmovq %r14, %rdi\nmovq %r15, %rsi\ncallq 0x471a\nmovq 0x20(%rsp), %rax\ntestq %rax, %rax\nje 0x3bc9\nmovq %r15, %rdi\nmovq %r15, %rsi\nmovl $0x3, %edx\ncallq *%rax\nincq %rbx\ncmpq %rbx, 0x66a5(%rip)      # 0xa278\nja 0x3b6f\nmovb $0x1, 0x30(%rsp)\nmovq 0x38(%rsp), %r14\nmovq 0x40(%rsp), %r15\ncmpq %r15, %r14\nje 0x3c09\nleaq -0x394(%rip), %rbx      # 0x385c\nmovq %r14, %rdi\nxorl %esi, %esi\nmovq %rbx, %rdx\nmovq %r14, %rcx\ncallq 0x2440\naddq $0x28, %r14\ncmpq %r15, %r14\njne 0x3bf0\nmovq (%rsp), %rdi\nxorl %esi, %esi\ncallq 0x3f42\nmovq 0x665d(%rip), %rax      # 0xa278\ntestq %rax, %rax\nje 0x3dc3\nmovq (%rsp), %rcx\nmovq 0x8(%rcx), %rcx\naddq $0x18, %rcx\nxorl %edx, %edx\nxorl %r15d, %r15d\nxorl %r12d, %r12d\naddq -0x10(%rcx), %r12\naddq -0x8(%rcx), %r15\naddq (%rcx), %rdx\naddq $0x20, %rcx\ndecq %rax\njne 0x3c38\nmovq %rdx, 0x8(%rsp)\nxorl %r14d, %r14d\nmovq 0x637d(%rip), %r13      # 0x9fd8\nxorl %ebp, %ebp\nmovl $0xf, %edx\nmovq %r13, %rdi\nleaq 0x2974(%rip), %rsi      # 0x65e0\ncallq 0x22d0\nmovq %r13, %rdi\nmovl %ebp, %esi\ncallq 0x2400\nmovl $0x3, %edx\nmovq %rax, %rdi\nleaq 0x2966(%rip), %rsi      # 0x65f0\ncallq 0x22d0\nmovl $0x11, %edx\nmovq %r13, %rdi\nleaq 0x2956(%rip), %rsi      # 0x65f4\ncallq 0x22d0\nmovq 0x65d6(%rip), %rsi      # 0xa280\nmovq %r13, %rdi\ncallq 0x21a0\nmovq %rax, %rbx\nmovl $0x7, %edx\nmovq %rax, %rdi\nleaq 0x2942(%rip), %rsi      # 0x6606\ncallq 0x22d0\nmovq (%rsp), %rax\nmovq 0x8(%rax), %rax\nmovq (%rax,%r14), %rsi\nmovq %rbx, %rdi\ncallq 0x21a0\nmovl $0x4, %edx\nmovq %rax, %rdi\nleaq 0x2922(%rip), %rsi      # 0x660e\ncallq 0x22d0\nmovl $0x11, %edx\nmovq %r13, %rdi\nleaq 0x2913(%rip), %rsi      # 0x6613\ncallq 0x22d0\nmovq (%rsp), %rax\nmovq 0x8(%rax), %rax\nmovq 0x18(%rax,%r14), %rsi\nmovq %r13, %rdi\ncallq 0x21a0\nmovl $0x2, %edx\nmovq %rax, %rdi\nleaq 0x2326(%rip), %rsi      # 0x604f\ncallq 0x22d0\nmovl $0x11, %edx\nmovq %r13, %rdi\nleaq 0x28e8(%rip), %rsi      # 0x6625\ncallq 0x22d0\nmovq (%rsp), %rax\nmovq 0x8(%rax), %rax\nmovq 0x8(%rax,%r14), %rsi\nmovq %r13, %rdi\ncallq 0x21a0\nmovl $0x2, %edx\nmovq %rax, %rdi\nleaq 0x22e9(%rip), %rsi      # 0x604f\ncallq 0x22d0\nmovl $0x11, %edx\nmovq %r13, %rdi\nleaq 0x28bd(%rip), %rsi      # 0x6637\ncallq 0x22d0\nmovq (%rsp), %rax\nmovq 0x8(%rax), %rax\nmovq 0x10(%rax,%r14), %rsi\nmovq %r13, %rdi\ncallq 0x21a0\nmovl $0x2, %edx\nmovq %rax, %rdi\nleaq 0x22ac(%rip), %rsi      # 0x604f\ncallq 0x22d0\nincq %rbp\naddq $0x20, %r14\ncmpq %rbp, 0x64c2(%rip)      # 0xa278\nja 0x3c5d\nmovq 0x8(%rsp), %rbx\njmp 0x3dcb\nxorl %ebx, %ebx\nxorl %r15d, %r15d\nxorl %r12d, %r12d\nmovq 0x6206(%rip), %rdi      # 0x9fd8\nleaq 0x2870(%rip), %rsi      # 0x6649\nmovl $0x10, %edx\ncallq 0x22d0\nmovq 0x61ee(%rip), %rdi      # 0x9fd8\nleaq 0x2869(%rip), %rsi      # 0x665a\nmovl $0x1a, %edx\ncallq 0x22d0\nmovq 0x61d6(%rip), %rdi      # 0x9fd8\nmovq %r12, %rsi\ncallq 0x21a0\nleaq 0x2ab9(%rip), %rsi      # 0x68ca\nmovl $0x1, %edx\nmovq %rax, %rdi\ncallq 0x22d0\nmovq 0x61b3(%rip), %rdi      # 0x9fd8\nleaq 0x2849(%rip), %rsi      # 0x6675\nmovl $0x1a, %edx\ncallq 0x22d0\nmovq 0x619b(%rip), %rdi      # 0x9fd8\nmovq %r15, %rsi\ncallq 0x21a0\nleaq 0x2a7e(%rip), %rsi      # 0x68ca\nmovl $0x1, %edx\nmovq %rax, %rdi\ncallq 0x22d0\nmovq 0x6178(%rip), %rdi      # 0x9fd8\nleaq 0x2829(%rip), %rsi      # 0x6690\nmovl $0x1a, %edx\ncallq 0x22d0\nmovq 0x6160(%rip), %rdi      # 0x9fd8\nmovq %rbx, %rsi\ncallq 0x21a0\nleaq 0x2a43(%rip), %rsi      # 0x68ca\nmovl $0x1, %edx\nmovq %rax, %rdi\ncallq 0x22d0\nmovq 0x613d(%rip), %rdi      # 0x9fd8\nleaq 0x2809(%rip), %rsi      # 0x66ab\nmovl $0x1a, %edx\ncallq 0x22d0\nimulq $0xf4240, %r15, %rax    # imm = 0xF4240\nxorl %edx, %edx\ndivq %rbx\nimulq 0x63b8(%rip), %rax      # 0xa278\nmovq 0x6111(%rip), %rdi      # 0x9fd8\nmovq %rax, %rsi\ncallq 0x21a0\nleaq 0x29f4(%rip), %rsi      # 0x68ca\nmovl $0x1, %edx\nmovq %rax, %rdi\ncallq 0x22d0\nleaq 0x30(%rsp), %rdi\ncallq 0x476c\naddq $0xc8, %rsp\npopq %rbx\npopq %r12\npopq %r13\npopq %r14\npopq %r15\npopq %rbp\nretq\njmp 0x3f2d\njmp 0x3f25\njmp 0x3f2d\njmp 0x3f2d\nmovq %rax, %rbx\nmovq 0x20(%rsp), %rax\ntestq %rax, %rax\nje 0x3f30\nleaq 0x10(%rsp), %rdi\nmovq %rdi, %rsi\nmovl $0x3, %edx\ncallq *%rax\njmp 0x3f30\nmovq %rax, %rdi\ncallq 0x2b0e\nmovq %rax, %rbx\nleaq 0x30(%rsp), %rdi\ncallq 0x476c\nmovq %rbx, %rdi\ncallq 0x2410\n","file":"\/distanceNing[P]benchmarkTool\/benckmark.cpp"}
{"name":"Option::printDefautOption()","code":"void Option::printDefautOption()\n{\n\n    printf(\"Defaut Option : \\n\");\n    printf(\"\\thost               = 127.0.0.1\\n\"\n            \"\\ttimeout_ms         = 3000\\n\"\n            \"\\tserver_port        = 9000\\n\"\n            \"\\tconcurrent_num     = 1024\\n\"\n            \"\\tis_keep_alive      = true\\n\"\n            \"\\tduration           = 0\\n\"\n            \"\\tthread_num         = 1\\n\");\n    printf(\"Usage: %s \\n\"\n            \"\\t  [-h host] \\n\"\n            \"\\t  [-p source_port] \\n\"\n            \"\\t  [-c concurrent_num] \\n\"\n            \"\\t  [-t thread_num] \\n\"\n            \"\\t  [-a is_keep_alive] \\n\"\n            \/\/测试持续时间\n            \"\\t  [-d duration] \\n\"\n            \"\\t  [-w timeout] \\n\", \"benchmark\");\n}","asm":"pushq %rax\nleaq 0x266d(%rip), %rdi      # 0x68d9\ncallq 0x2390\nleaq 0x2672(%rip), %rdi      # 0x68ea\ncallq 0x2390\nleaq 0x2468(%rip), %rdi      # 0x66ec\nleaq 0x24f6(%rip), %rsi      # 0x6781\nxorl %eax, %eax\npopq %rcx\njmp 0x2050\nnop\n","file":"\/distanceNing[P]benchmarkTool\/benckmark.cpp"}
{"name":"Option::printCurrentOption()","code":"void Option::printCurrentOption()\n{\n    printf(\"Current Option : \\n\");\n    std::cout << \"\\thost               = \" << server_ip_ << \"\\n\" << \"\\tserver_port        = \" << server_port_ << \"\\n\"\n              << \"\\ttimeout_ms         = \" << connect_timeout_ms_ << \"\\n\" << \"\\tconcurrent_num     = \"\n              << concurrent_num_ << \"\\n\" << \"\\tis_keep_alive      = \" << is_keep_alive_ << \"\\n\"\n              << \"\\tthread_num         = \" << thread_num_ << \"\\n\" << \"\\tduration           = \" << duration_ << \"\\n\"\n              << \"\\tinterval_time_s    = \" << interval_time_s_ << \"\\n\";\n}","asm":"pushq %r15\npushq %r14\npushq %rbx\nmovq %rdi, %rbx\nleaq 0x2703(%rip), %rdi      # 0x69a6\ncallq 0x2390\nmovq 0x5d29(%rip), %r14      # 0x9fd8\nleaq 0x24d5(%rip), %rsi      # 0x678b\nmovl $0x16, %edx\nmovq %r14, %rdi\ncallq 0x22d0\nmovq (%rbx), %r15\ntestq %r15, %r15\nje 0x42e7\nmovq %r15, %rdi\ncallq 0x2120\nmovq 0x5cfe(%rip), %rdi      # 0x9fd8\nmovq %r15, %rsi\nmovq %rax, %rdx\ncallq 0x22d0\njmp 0x42ff\nmovq (%r14), %rax\nmovq -0x18(%rax), %rax\nleaq (%r14,%rax), %rdi\nmovl 0x20(%r14,%rax), %esi\norl $0x1, %esi\ncallq 0x23f0\nmovq 0x5cd2(%rip), %r15      # 0x9fd8\nleaq 0x25bd(%rip), %r14      # 0x68ca\nmovl $0x1, %edx\nmovq %r15, %rdi\nmovq %r14, %rsi\ncallq 0x22d0\nleaq 0x247e(%rip), %rsi      # 0x67a2\nmovl $0x16, %edx\nmovq %r15, %rdi\ncallq 0x22d0\nmovzwl 0x8(%rbx), %esi\nmovq %r15, %rdi\ncallq 0x21a0\nmovq %rax, %r15\nmovl $0x1, %edx\nmovq %rax, %rdi\nmovq %r14, %rsi\ncallq 0x22d0\nleaq 0x2462(%rip), %rsi      # 0x67b9\nmovl $0x16, %edx\nmovq %r15, %rdi\ncallq 0x22d0\nmovq 0x20(%rbx), %rsi\nmovq %r15, %rdi\ncallq 0x21a0\nmovq %rax, %r15\nmovl $0x1, %edx\nmovq %rax, %rdi\nmovq %r14, %rsi\ncallq 0x22d0\nleaq 0x2446(%rip), %rsi      # 0x67d0\nmovl $0x16, %edx\nmovq %r15, %rdi\ncallq 0x22d0\nmovq 0x18(%rbx), %rsi\nmovq %r15, %rdi\ncallq 0x21a0\nmovq %rax, %r15\nmovl $0x1, %edx\nmovq %rax, %rdi\nmovq %r14, %rsi\ncallq 0x22d0\nleaq 0x242a(%rip), %rsi      # 0x67e7\nmovl $0x16, %edx\nmovq %r15, %rdi\ncallq 0x22d0\nmovzbl 0xa(%rbx), %esi\nmovq %r15, %rdi\ncallq 0x23e0\nmovq %rax, %r15\nmovl $0x1, %edx\nmovq %rax, %rdi\nmovq %r14, %rsi\ncallq 0x22d0\nleaq 0x240e(%rip), %rsi      # 0x67fe\nmovl $0x16, %edx\nmovq %r15, %rdi\ncallq 0x22d0\nmovq 0x10(%rbx), %rsi\nmovq %r15, %rdi\ncallq 0x21a0\nmovq %rax, %r15\nmovl $0x1, %edx\nmovq %rax, %rdi\nmovq %r14, %rsi\ncallq 0x22d0\nleaq 0x23f2(%rip), %rsi      # 0x6815\nmovl $0x16, %edx\nmovq %r15, %rdi\ncallq 0x22d0\nmovl 0x2c(%rbx), %esi\nmovq %r15, %rdi\ncallq 0x21a0\nmovq %rax, %r15\nmovl $0x1, %edx\nmovq %rax, %rdi\nmovq %r14, %rsi\ncallq 0x22d0\nleaq 0x23d7(%rip), %rsi      # 0x682c\nmovl $0x16, %edx\nmovq %r15, %rdi\ncallq 0x22d0\nmovl 0x28(%rbx), %esi\nmovq %r15, %rdi\ncallq 0x21a0\nmovl $0x1, %edx\nmovq %rax, %rdi\nmovq %r14, %rsi\npopq %rbx\npopq %r14\npopq %r15\njmp 0x22d0\n","file":"\/distanceNing[P]benchmarkTool\/benckmark.cpp"}
{"name":"Option::process_parameters(int, char**)","code":"int Option::process_parameters(int argc, char** argv)\n{\n    int c;\n    while ((c = getopt(argc, argv, \"h:p:t:c:aw:d:\")) != -1) {\n        switch (c) {\n        case 'a':gOption.is_keep_alive_ = true;\n            break;\n        case 'h':gOption.server_ip_ = optarg;\n            break;\n        case 't':gOption.thread_num_ = (size_t) atoi(optarg);\n            break;\n        case 'p':gOption.server_port_ = (uint16_t) atoi(optarg);\n            break;\n        case 'c':gOption.concurrent_num_ = (uint16_t) atoi(optarg);\n            break;\n        case 'd':gOption.duration_ = (uint32_t) atoi(optarg);\n            break;\n        case 'w':gOption.connect_timeout_ms_ = (uint32_t) atoi(optarg);\n            break;\n        default:Option::printDefautOption();\n            return 0;\n        }\n    }\n\n    return 0;\n}","asm":"pushq %rbp\npushq %r15\npushq %r14\npushq %r12\npushq %rbx\nmovq %rsi, %rbx\nmovl %edi, %ebp\nleaq 0x23ad(%rip), %r14      # 0x6843\nleaq 0x20c7(%rip), %r15      # 0x6564\nmovq 0x5b24(%rip), %r12      # 0x9fc8\nmovl %ebp, %edi\nmovq %rbx, %rsi\nmovq %r14, %rdx\ncallq 0x2070\ncmpl $0x6f, %eax\njg 0x44d4\nleal -0x61(%rax), %ecx\ncmpl $0x7, %ecx\nja 0x4559\nmovslq (%r15,%rcx,4), %rax\naddq %r15, %rax\njmpq *%rax\nmovb $0x1, 0x5da0(%rip)      # 0xa272\njmp 0x44a4\ncmpl $0x70, %eax\nje 0x452d\ncmpl $0x74, %eax\nje 0x4542\ncmpl $0x77, %eax\njne 0x455e\nmovq (%r12), %rdi\ncallq 0x23a0\nmovl %eax, %eax\nmovq %rax, 0x5d93(%rip)      # 0xa288\njmp 0x44a4\nmovq (%r12), %rdi\ncallq 0x23a0\nmovl %eax, 0x5d8e(%rip)      # 0xa294\njmp 0x44a4\nmovq (%r12), %rdi\ncallq 0x23a0\nmovzwl %ax, %eax\nmovq %rax, 0x5d65(%rip)      # 0xa280\njmp 0x44a4\nmovq (%r12), %rax\nmovq %rax, 0x5d40(%rip)      # 0xa268\njmp 0x44a4\nmovq (%r12), %rdi\ncallq 0x23a0\nmovw %ax, 0x5d33(%rip)       # 0xa270\njmp 0x44a4\nmovq (%r12), %rdi\ncallq 0x23a0\ncltq\nmovq %rax, 0x5d24(%rip)      # 0xa278\njmp 0x44a4\ncmpl $-0x1, %eax\nje 0x4563\ncallq 0x4264\nxorl %eax, %eax\npopq %rbx\npopq %r12\npopq %r14\npopq %r15\npopq %rbp\nretq\n","file":"\/distanceNing[P]benchmarkTool\/benckmark.cpp"}
{"name":"iutest::UnitTestImpl::ValidateTestPropertyName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)","code":"static bool ValidateTestPropertyName(const ::std::string& name)\n    {\n        const char* ban[] = {\n            \"name\", \"tests\", \"failures\", \"disabled\", \"skip\", \"errors\", \"time\", \"timestamp\", \"random_seed\"\n        };\n#if !defined(IUTEST_NO_FUNCTION_TEMPLATE_ORDERING)\n        return TestProperty::ValidateName(name, ban);\n#else\n        return TestProperty::ValidateName(name, ban, ban+IUTEST_PP_COUNTOF(ban));\n#endif\n    }","asm":"pushq %rbx\nsubq $0x50, %rsp\nmovq %rdi, %rdx\nleaq 0x119a7(%rip), %rsi     # 0x32540\nmovq %rsp, %rax\nmovl $0x9, %ecx\nmovq %rax, %rdi\nrep  movsq (%rsi), %es:(%rdi)\nleaq 0x48(%rsp), %rbx\nmovq %rax, %rdi\nmovq %rbx, %rsi\ncallq 0x21477\ncmpq %rbx, %rax\nsete %al\naddq $0x50, %rsp\npopq %rbx\nretq\nnop\n","file":"\/srz-zumix[P]iutest\/include\/internal\/iutest_core_impl.hpp"}
{"name":"sqstd_aux_printerror(SQVM*)","code":"static SQInteger _sqstd_aux_printerror(HSQUIRRELVM v)\n{\n    SQPRINTFUNCTION pf = sq_geterrorfunc(v);\n    if(pf) {\n        const SQChar *sErr = 0;\n        if(sq_gettop(v)>=1) {\n            if(SQ_SUCCEEDED(sq_getstring(v,2,&sErr)))   {\n                pf(v,_SC(\"\\nAN ERROR HAS OCCURRED [%s]\\n\"),sErr);\n            }\n            else{\n                pf(v,_SC(\"\\nAN ERROR HAS OCCURRED [unknown]\\n\"));\n            }\n            sqstd_printcallstack(v);\n        }\n    }\n    return 0;\n}","asm":"pushq %r14\npushq %rbx\npushq %rax\nmovq %rdi, %rbx\ncallq 0x5120\ntestq %rax, %rax\nje 0x5d5b\nmovq %rax, %r14\nmovq $0x0, (%rsp)\nmovq %rbx, %rdi\ncallq 0x5270\ntestq %rax, %rax\njle 0x5d5b\nmovq %rsp, %rdx\nmovl $0x2, %esi\nmovq %rbx, %rdi\ncallq 0x5110\ntestq %rax, %rax\njs 0x5d44\nmovq (%rsp), %rdx\nleaq 0x5437(%rip), %rsi      # 0xb171\nmovq %rbx, %rdi\nxorl %eax, %eax\ncallq *%r14\njmp 0x5d53\nleaq 0x5443(%rip), %rsi      # 0xb18e\nmovq %rbx, %rdi\nxorl %eax, %eax\ncallq *%r14\nmovq %rbx, %rdi\ncallq 0x5500\nxorl %eax, %eax\naddq $0x8, %rsp\npopq %rbx\npopq %r14\nretq\n","file":"\/albertodemichelis[P]squirrel\/sqstdlib\/sqstdaux.cpp"}
{"name":"blob_resize(SQVM*)","code":"static SQInteger _blob_resize(HSQUIRRELVM v)\n{\n    SETUP_BLOB(v);\n    SQInteger size;\n    sq_getinteger(v,2,&size);\n    if(!self->Resize(size))\n        return sq_throwerror(v,_SC(\"resize failed\"));\n    return 0;\n}","asm":"pushq %r14\npushq %rbx\nsubq $0x18, %rsp\nmovq %rdi, %rbx\nleaq 0x8(%rsp), %rdx\nmovq $0x0, (%rdx)\nmovl $0x1, %esi\nmovl $0x80000002, %ecx       # imm = 0x80000002\nxorl %r8d, %r8d\ncallq 0x5050\ntestq %rax, %rax\njs 0x612e\nmovq 0x8(%rsp), %rdi\ntestq %rdi, %rdi\nje 0x6125\nmovq (%rdi), %rax\ncallq *0x40(%rax)\ntestb %al, %al\nje 0x6125\nleaq 0x10(%rsp), %r14\nmovl $0x2, %esi\nmovq %rbx, %rdi\nmovq %r14, %rdx\ncallq 0x5380\nmovq 0x8(%rsp), %rdi\nmovq (%r14), %rsi\ncallq 0x5670\ntestb %al, %al\nje 0x6137\nxorl %eax, %eax\njmp 0x6146\nleaq 0x5124(%rip), %rsi      # 0xb250\njmp 0x613e\nleaq 0x510a(%rip), %rsi      # 0xb23f\njmp 0x613e\nleaq 0x5126(%rip), %rsi      # 0xb264\nmovq %rbx, %rdi\ncallq 0x5310\naddq $0x18, %rsp\npopq %rbx\npopq %r14\nretq\n","file":"\/albertodemichelis[P]squirrel\/sqstdlib\/sqstdblob.cpp"}
{"name":"blob_swap4(SQVM*)","code":"static SQInteger _blob_swap4(HSQUIRRELVM v)\n{\n    SETUP_BLOB(v);\n    SQInteger num=(self->Len()-(self->Len()%4))>>2;\n    unsigned int *t=(unsigned int *)self->GetBuf();\n    for(SQInteger i = 0; i < num; i++) {\n        __swap_dword(&t[i]);\n    }\n    return 0;\n}","asm":"pushq %r14\npushq %rbx\npushq %rax\nmovq %rdi, %rbx\nmovq %rsp, %rdx\nmovq $0x0, (%rdx)\nmovl $0x1, %esi\nmovl $0x80000002, %ecx       # imm = 0x80000002\nxorl %r8d, %r8d\ncallq 0x5050\ntestq %rax, %rax\njs 0x6291\nmovq (%rsp), %rdi\nleaq 0x5021(%rip), %r14      # 0xb250\ntestq %rdi, %rdi\nje 0x6298\nmovq (%rdi), %rax\ncallq *0x40(%rax)\ntestb %al, %al\nje 0x6298\nmovq (%rsp), %rdi\nmovq (%rdi), %rax\ncallq *0x30(%rax)\nmovq %rax, %rbx\nmovq (%rsp), %rdi\nmovq (%rdi), %rax\ncallq *0x30(%rax)\nleaq 0x3(%rax), %rcx\ntestq %rax, %rax\ncmovnsq %rax, %rcx\nandq $-0x4, %rcx\nsubq %rax, %rcx\naddq %rbx, %rcx\nsarq $0x2, %rcx\ntestq %rcx, %rcx\njle 0x62ab\nmovq (%rsp), %rax\nmovq 0x20(%rax), %rdx\nxorl %eax, %eax\nxorl %esi, %esi\nmovl (%rdx,%rsi,4), %edi\nbswapl %edi\nmovl %edi, (%rdx,%rsi,4)\nincq %rsi\ncmpq %rsi, %rcx\njne 0x627f\njmp 0x62a3\nleaq 0x4fa7(%rip), %r14      # 0xb23f\nmovq %rbx, %rdi\nmovq %r14, %rsi\ncallq 0x5310\naddq $0x8, %rsp\npopq %rbx\npopq %r14\nretq\nxorl %eax, %eax\njmp 0x62a3\n","file":"\/albertodemichelis[P]squirrel\/sqstdlib\/sqstdblob.cpp"}
{"name":"blob__get(SQVM*)","code":"static SQInteger _blob__get(HSQUIRRELVM v)\n{\n    SETUP_BLOB(v);\n    SQInteger idx;\n\t\n\tif ((sq_gettype(v, 2) & SQOBJECT_NUMERIC) == 0)\n\t{\n\t\tsq_pushnull(v);\n\t\treturn sq_throwobject(v);\n\t}\n    sq_getinteger(v,2,&idx);\n    if(idx < 0 || idx >= self->Len())\n        return sq_throwerror(v,_SC(\"index out of range\"));\n    sq_pushinteger(v,((unsigned char *)self->GetBuf())[idx]);\n    return 1;\n}","asm":"pushq %r14\npushq %rbx\nsubq $0x18, %rsp\nmovq %rdi, %rbx\nleaq 0x8(%rsp), %rdx\nmovq $0x0, (%rdx)\nmovl $0x1, %esi\nmovl $0x80000002, %ecx       # imm = 0x80000002\nxorl %r8d, %r8d\ncallq 0x5050\ntestq %rax, %rax\njs 0x63ef\nmovq 0x8(%rsp), %rdi\ntestq %rdi, %rdi\nje 0x63e6\nmovq (%rdi), %rax\ncallq *0x40(%rax)\ntestb %al, %al\nje 0x63e6\nmovl $0x2, %esi\nmovq %rbx, %rdi\ncallq 0x5320\nbtl $0x1a, %eax\njb 0x6406\nmovq %rbx, %rdi\ncallq 0x5580\nmovq %rbx, %rdi\ncallq 0x5730\njmp 0x63fe\nleaq 0x4e63(%rip), %rsi      # 0xb250\njmp 0x63f6\nleaq 0x4e49(%rip), %rsi      # 0xb23f\nmovq %rbx, %rdi\ncallq 0x5310\naddq $0x18, %rsp\npopq %rbx\npopq %r14\nretq\nleaq 0x10(%rsp), %r14\nmovl $0x2, %esi\nmovq %rbx, %rdi\nmovq %r14, %rdx\ncallq 0x5380\nmovq (%r14), %r14\ntestq %r14, %r14\njs 0x6454\nmovq 0x8(%rsp), %rdi\nmovq (%rdi), %rax\ncallq *0x30(%rax)\ncmpq %rax, %r14\njge 0x6454\nmovq 0x8(%rsp), %rax\nmovq 0x20(%rax), %rax\nmovq 0x10(%rsp), %rcx\nmovzbl (%rax,%rcx), %esi\nmovq %rbx, %rdi\ncallq 0x53c0\nmovl $0x1, %eax\njmp 0x63fe\nleaq 0x4e17(%rip), %rsi      # 0xb272\njmp 0x63f6\n","file":"\/albertodemichelis[P]squirrel\/sqstdlib\/sqstdblob.cpp"}
